from django.contrib.auth.hashers import make_password, check_password
from django.db import models
from django.utils import timezone


class Participant(models.Model):
    # üîê –¢–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ / –ª–æ–≥–∏–Ω–∞
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    password = models.CharField(max_length=128)
    phone_number = models.CharField(max_length=20)
    city = models.CharField(max_length=100)
    postal_code = models.CharField(max_length=10)
    street = models.CharField(max_length=100)
    street_extra = models.CharField(max_length=100, blank=True)
    
    # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
    privacy_accepted = models.BooleanField(default=False)

    def __str__(self):
        return f'{self.first_name} {self.last_name} ({self.email})'

    def full_name(self):
        return f"{self.first_name} {self.last_name}"
    
    def set_password(self, raw_password):
        self.password = make_password(raw_password)

    def check_password(self, raw_password):
        return check_password(raw_password, self.password)


class Registration(models.Model):
    participant = models.ForeignKey(Participant, on_delete=models.CASCADE, related_name='registrations')
    # –û–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
    leisure_activities = models.TextField(blank=True)
    church_contact = models.CharField(max_length=200, blank=True)
    needs_transport = models.BooleanField(default=False)
    has_dietary_restrictions = models.BooleanField(default=False)
    dietary_details = models.CharField(max_length=200, blank=True)
    comment = models.TextField(blank=True)
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f"Anmeldung von {self.participant.full_name()} ({self.id})"


class Adult(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    GENDER_CHOICES = [
        ('male', 'M√§nnlich'),
        ('female', 'Weiblich'),
    ]
    
    HOUSING_CHOICES = [
        ('family', 'Mit Familie im eigenen Haus'),
        ('brudershaus', 'Br√ºderhaus (f√ºr M√§nner)'),
        ('sisterhaus', 'Schwesterhaus (f√ºr Frauen)'),
        ('no_preference', 'Keine Pr√§ferenz'),
    ]

    registration = models.ForeignKey('Registration', on_delete=models.CASCADE, related_name='adults')
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default='male',)
    housing_preference = models.CharField(
        max_length=20,
        choices=HOUSING_CHOICES,
        default='family',
        blank=True
    )
    participation_type = models.CharField(max_length=20, choices=[('onsite', 'Vor Ort'), ('online', 'Nur Online')], default='onsite',)
    arrival_date = models.DateField(null=True, blank=True)
    departure_date = models.DateField(null=True, blank=True)
    is_full_week = models.BooleanField(
        default=False,
        verbose_name="Vollzeit (–ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è)"
    )
    is_student = models.BooleanField(default=False)
    age = models.PositiveIntegerField(null=True, blank=True)
    comes_with_partner = models.BooleanField(default=False)
    food_preference = models.CharField(
        max_length=20,
        choices=[('normal', 'Normal'), ('vegetarian', 'Vegetarisch')],
        default='normal'  # <= –≤–æ—Ç —Ç–∞–∫!
        )
    
    SERVICES_CHOICES = [
        ('guitar', 'Gitarre'),
        ('piano', 'Klavier'),
        ('kids_small', 'Kleinkinder'),
        ('kids_kiga', 'Kiga'),
        ('kids_school', 'Sch√ºler'),
        ('chairs', 'Stuhldienst'),
        ('tech', 'Technik'),
        ('microphones', 'Mikrofondienst'),
    ]
    services = models.CharField(max_length=200, blank=True)

    def __str__(self):
        return f"{self.age} J. ({self.participation_type})"
    
    @property
    def services_list(self):
        # –†–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "guitar,piano" ‚Üí ["guitar", "piano"]
        return [s for s in self.services.split(',') if s.strip()]


class Child(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    GENDER_CHOICES = [
        ('male', 'Junge'),
        ('female', 'M√§dchen'),
    ]
    HOUSING_CHOICES = [
        ('family', 'Mit Familie im eigenen Haus'),
        ('brudershaus', 'Br√ºderhaus (f√ºr Jungen)'),
        ('sisterhaus', 'Schwesterhaus (f√ºr M√§dchen)'),
        ('no_preference', 'Keine Pr√§ferenz'),
    ]

    registration = models.ForeignKey('Registration', on_delete=models.CASCADE, related_name='children')
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default='male',)
    housing_preference = models.CharField(
        max_length=20,
        choices=HOUSING_CHOICES,
        default='family',
        blank=True
    )
    participation_type = models.CharField(max_length=20, choices=[('onsite', 'Vor Ort'), ('online', 'Nur Online')], default='onsite',)
    arrival_date = models.DateField(null=True, blank=True)
    departure_date = models.DateField(null=True, blank=True)
    is_full_week = models.BooleanField(
        default=False,
        verbose_name="Vollzeit (–ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è)"
    )
    is_student = models.BooleanField(default=False)
    age = models.PositiveIntegerField(null=True, blank=True)
    food_preference = models.CharField(
        max_length=20,
        choices=[('normal', 'Normal'), ('vegetarian', 'Vegetarisch')],
        default='normal'  # <= –≤–æ—Ç —Ç–∞–∫!
        )
    
    SERVICES_CHOICES = [
        ('guitar', 'Gitarre'),
        ('piano', 'Klavier'),
        ('kids_small', 'Kleinkinder'),
        ('kids_kiga', 'Kiga'),
        ('kids_school', 'Sch√ºler'),
        ('chairs', 'Stuhldienst'),
        ('tech', 'Technik'),
        ('microphones', 'Mikrofondienst'),
    ]
    services = models.CharField(max_length=200, blank=True)

    def __str__(self):
        return f"{self.age} J. ({self.participation_type})"
    
    @property
    def services_list(self):
        # –†–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "guitar,piano" ‚Üí ["guitar", "piano"]
        return [s for s in self.services.split(',') if s.strip()]
